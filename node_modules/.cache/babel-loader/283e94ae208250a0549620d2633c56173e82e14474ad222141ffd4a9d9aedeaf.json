{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eniac\\\\Desktop\\\\deepblue\\\\src\\\\components\\\\Whiteboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Stage, Layer, Line, Rect, Circle, Image, Transformer } from 'react-konva';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://192.168.31.158:3001', {\n  transports: ['websocket', 'polling'],\n  reconnectionDelay: 1000,\n  reconnectionAttempts: 10,\n  forceNew: true\n});\nconst Whiteboard = () => {\n  _s();\n  const [lines, setLines] = useState([]);\n  const [shapes, setShapes] = useState([]);\n  const [selectedId, setSelectedId] = useState(null);\n  const [tool, setTool] = useState('pen'); // pen, eraser, line, rectangle, circle, select\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [startPos, setStartPos] = useState({\n    x: 0,\n    y: 0\n  });\n  const transformerRef = useRef();\n  const stageRef = useRef();\n  useEffect(() => {\n    socket.on('draw-update', ({\n      lines,\n      shapes\n    }) => {\n      setLines(lines);\n      setShapes(shapes);\n    });\n    return () => {\n      socket.off('draw-update');\n    };\n  }, []);\n  useEffect(() => {\n    if (selectedId) {\n      const shape = shapes.find(s => s.id === selectedId);\n      if (shape && transformerRef.current) {\n        transformerRef.current.nodes([stageRef.current.findOne('#' + selectedId)]);\n        transformerRef.current.getLayer().batchDraw();\n      }\n    }\n  }, [selectedId, shapes]);\n  const handleMouseDown = e => {\n    const pos = e.target.getStage().getPointerPosition();\n    setIsDrawing(true);\n    setStartPos(pos);\n    if (tool === 'pen') {\n      const newLines = [...lines, {\n        tool,\n        points: [pos.x, pos.y]\n      }];\n      setLines(newLines);\n      socket.emit('draw-update', {\n        lines: newLines,\n        shapes\n      });\n    } else if (tool === 'eraser') {\n      const newLines = [...lines, {\n        tool,\n        points: [pos.x, pos.y]\n      }];\n      setLines(newLines);\n      socket.emit('draw-update', {\n        lines: newLines,\n        shapes\n      });\n    } else if (tool === 'select') {\n      const clickedShape = e.target;\n      if (clickedShape === e.target.getStage()) {\n        setSelectedId(null);\n        return;\n      }\n      if (clickedShape.getParent().className === 'Transformer') {\n        return;\n      }\n      setSelectedId(clickedShape.id());\n    }\n  };\n  const handleMouseMove = e => {\n    if (!isDrawing) return;\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    if (tool === 'pen' || tool === 'eraser') {\n      const lastLine = lines[lines.length - 1];\n      lastLine.points = lastLine.points.concat([point.x, point.y]);\n      const newLines = [...lines.slice(0, -1), lastLine];\n      setLines(newLines);\n      socket.emit('draw-update', {\n        lines: newLines,\n        shapes\n      });\n    } else if (['line', 'rectangle', 'circle'].includes(tool)) {\n      const newShapes = [...shapes];\n      const index = newShapes.findIndex(s => s.id === 'temp');\n      const shapeData = {\n        id: 'temp',\n        type: tool,\n        x: startPos.x,\n        y: startPos.y,\n        width: point.x - startPos.x,\n        height: point.y - startPos.y\n      };\n      if (index === -1) {\n        newShapes.push(shapeData);\n      } else {\n        newShapes[index] = shapeData;\n      }\n      setShapes(newShapes);\n      socket.emit('draw-update', {\n        lines,\n        shapes: newShapes\n      });\n    }\n  };\n  const handleMouseUp = () => {\n    setIsDrawing(false);\n    if (['line', 'rectangle', 'circle'].includes(tool)) {\n      const newShapes = shapes.map(shape => shape.id === 'temp' ? {\n        ...shape,\n        id: Date.now().toString()\n      } : shape);\n      setShapes(newShapes);\n      socket.emit('draw-update', {\n        lines,\n        shapes: newShapes\n      });\n    }\n  };\n  const handleImageUpload = e => {\n    const file = e.target.files[0];\n    if (!file) return;\n\n    // Validate file type and create a cache-safe URL\n    if (!file.type.startsWith('image/')) {\n      alert('Please upload an image file');\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = () => {\n      // Create a temporary canvas to process the image\n      const tempCanvas = document.createElement('canvas');\n      const tempCtx = tempCanvas.getContext('2d');\n      const img = new window.Image();\n      img.onload = () => {\n        // Set canvas size and draw image to get processed data\n        tempCanvas.width = img.width;\n        tempCanvas.height = img.height;\n        tempCtx.drawImage(img, 0, 0);\n\n        // Get processed image data\n        const processedImageData = tempCanvas.toDataURL('image/png');\n\n        // Calculate dimensions\n        const maxWidth = 800;\n        const maxHeight = 600;\n        let newWidth = img.width;\n        let newHeight = img.height;\n        if (newWidth > maxWidth || newHeight > maxHeight) {\n          const ratio = Math.min(maxWidth / newWidth, maxHeight / newHeight);\n          newWidth *= ratio;\n          newHeight *= ratio;\n        }\n        const newShape = {\n          id: Date.now().toString(),\n          type: 'image',\n          x: window.innerWidth / 4,\n          y: window.innerHeight / 4,\n          width: newWidth,\n          height: newHeight,\n          image: processedImageData,\n          rotation: 0\n        };\n        const newShapes = [...shapes, newShape];\n        setShapes(newShapes);\n        socket.emit('draw-update', {\n          lines,\n          shapes: newShapes\n        });\n      };\n      img.src = reader.result;\n    };\n    reader.onerror = () => {\n      alert('Error reading file. Please try again.');\n    };\n    reader.readAsDataURL(file);\n  };\n  const handleDragEnd = e => {\n    const shape = e.target;\n    const newShapes = shapes.map(s => {\n      if (s.id === shape.id()) {\n        if (s.type === 'circle') {\n          return {\n            ...s,\n            x: shape.x() - s.width / 2,\n            y: shape.y() - s.height / 2\n          };\n        }\n        return {\n          ...s,\n          x: shape.x(),\n          y: shape.y()\n        };\n      }\n      return s;\n    });\n    setShapes(newShapes);\n    socket.emit('draw-update', {\n      lines,\n      shapes: newShapes\n    });\n  };\n  const handleTransformEnd = e => {\n    const node = e.target;\n    const scaleX = node.scaleX();\n    const scaleY = node.scaleY();\n    node.scaleX(1);\n    node.scaleY(1);\n    const newShapes = shapes.map(shape => shape.id === node.id() ? {\n      ...shape,\n      x: node.x(),\n      y: node.y(),\n      width: Math.abs(node.width() * scaleX),\n      height: Math.abs(node.height() * scaleY),\n      rotation: node.rotation()\n    } : shape);\n    setShapes(newShapes);\n    socket.emit('draw-update', {\n      lines,\n      shapes: newShapes\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'fixed',\n        top: 10,\n        left: 10,\n        zIndex: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setTool('pen'),\n        children: \"Pen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setTool('eraser'),\n        children: \"Eraser\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setTool('line'),\n        children: \"Line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setTool('rectangle'),\n        children: \"Rectangle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setTool('circle'),\n        children: \"Circle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setTool('select'),\n        children: \"Select\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: handleImageUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setLines([]);\n          setShapes([]);\n          socket.emit('draw-update', {\n            lines: [],\n            shapes: []\n          });\n        },\n        children: \"Clear All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stage, {\n      ref: stageRef,\n      width: window.innerWidth,\n      height: window.innerHeight,\n      onMouseDown: handleMouseDown,\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      onTouchStart: handleMouseDown,\n      onTouchMove: handleMouseMove,\n      onTouchEnd: handleMouseUp,\n      children: /*#__PURE__*/_jsxDEV(Layer, {\n        children: [lines.map((line, i) => /*#__PURE__*/_jsxDEV(Line, {\n          points: line.points,\n          stroke: line.tool === 'eraser' ? '#ffffff' : '#000000',\n          strokeWidth: line.tool === 'eraser' ? 20 : 5,\n          tension: 0.5,\n          lineCap: \"round\",\n          lineJoin: \"round\",\n          globalCompositeOperation: line.tool === 'eraser' ? 'destination-out' : 'source-over'\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this)), shapes.map(shape => {\n          if (shape.type === 'line') {\n            return /*#__PURE__*/_jsxDEV(Line, {\n              id: shape.id,\n              points: [shape.x, shape.y, shape.x + shape.width, shape.y + shape.height],\n              stroke: \"#000000\",\n              strokeWidth: 5,\n              draggable: tool === 'select',\n              onClick: () => setSelectedId(shape.id),\n              onTransformEnd: handleTransformEnd\n            }, shape.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 17\n            }, this);\n          } else if (shape.type === 'rectangle') {\n            return /*#__PURE__*/_jsxDEV(Rect, {\n              id: shape.id,\n              x: shape.x,\n              y: shape.y,\n              width: shape.width,\n              height: shape.height,\n              rotation: shape.rotation,\n              stroke: \"#000000\",\n              strokeWidth: 5,\n              draggable: tool === 'select',\n              onClick: () => tool === 'select' && setSelectedId(shape.id),\n              onDragEnd: handleDragEnd,\n              onTransformEnd: handleTransformEnd\n            }, shape.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 17\n            }, this);\n          } else if (shape.type === 'circle') {\n            return /*#__PURE__*/_jsxDEV(Circle, {\n              id: shape.id,\n              x: shape.x + shape.width / 2,\n              y: shape.y + shape.height / 2,\n              radius: Math.abs(shape.width) / 2,\n              stroke: \"#000000\",\n              strokeWidth: 5,\n              draggable: tool === 'select',\n              onClick: () => tool === 'select' && setSelectedId(shape.id),\n              onDragEnd: handleDragEnd,\n              onTransformEnd: handleTransformEnd,\n              rotation: shape.rotation\n            }, shape.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 17\n            }, this);\n          } else if (shape.type === 'image') {\n            const imageObj = new window.Image();\n            imageObj.crossOrigin = 'anonymous';\n            imageObj.src = shape.image;\n            return /*#__PURE__*/_jsxDEV(Image, {\n              id: shape.id,\n              image: imageObj,\n              x: shape.x,\n              y: shape.y,\n              width: shape.width,\n              height: shape.height,\n              rotation: shape.rotation,\n              draggable: tool === 'select',\n              onClick: () => tool === 'select' && setSelectedId(shape.id),\n              onDragEnd: handleDragEnd,\n              onTransformEnd: handleTransformEnd\n            }, shape.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 17\n            }, this);\n          }\n          return null;\n        }), selectedId && tool === 'select' && /*#__PURE__*/_jsxDEV(Transformer, {\n          ref: transformerRef,\n          boundBoxFunc: (oldBox, newBox) => {\n            const isValid = newBox.width > 5 && newBox.height > 5;\n            return isValid ? newBox : oldBox;\n          },\n          rotationSnaps: [0, 45, 90, 135, 180, 225, 270, 315],\n          enabledAnchors: ['top-left', 'top-center', 'top-right', 'middle-left', 'middle-right', 'bottom-left', 'bottom-center', 'bottom-right'],\n          anchorSize: 8,\n          anchorCornerRadius: 4,\n          borderStroke: \"#00ff00\",\n          anchorStroke: \"#00ff00\",\n          anchorFill: \"#ffffff\",\n          padding: 5\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 5\n  }, this);\n};\n_s(Whiteboard, \"eh9DEfyUTkjNyeLSNNEu6KlgQrk=\");\n_c = Whiteboard;\nexport default Whiteboard;\nvar _c;\n$RefreshReg$(_c, \"Whiteboard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Stage","Layer","Line","Rect","Circle","Image","Transformer","io","jsxDEV","_jsxDEV","socket","transports","reconnectionDelay","reconnectionAttempts","forceNew","Whiteboard","_s","lines","setLines","shapes","setShapes","selectedId","setSelectedId","tool","setTool","isDrawing","setIsDrawing","startPos","setStartPos","x","y","transformerRef","stageRef","on","off","shape","find","s","id","current","nodes","findOne","getLayer","batchDraw","handleMouseDown","e","pos","target","getStage","getPointerPosition","newLines","points","emit","clickedShape","getParent","className","handleMouseMove","stage","point","lastLine","length","concat","slice","includes","newShapes","index","findIndex","shapeData","type","width","height","push","handleMouseUp","map","Date","now","toString","handleImageUpload","file","files","startsWith","alert","reader","FileReader","onload","tempCanvas","document","createElement","tempCtx","getContext","img","window","drawImage","processedImageData","toDataURL","maxWidth","maxHeight","newWidth","newHeight","ratio","Math","min","newShape","innerWidth","innerHeight","image","rotation","src","result","onerror","readAsDataURL","handleDragEnd","handleTransformEnd","node","scaleX","scaleY","abs","children","style","position","top","left","zIndex","onClick","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","ref","onMouseDown","onMouseMove","onMouseUp","onTouchStart","onTouchMove","onTouchEnd","line","i","stroke","strokeWidth","tension","lineCap","lineJoin","globalCompositeOperation","draggable","onTransformEnd","onDragEnd","radius","imageObj","crossOrigin","boundBoxFunc","oldBox","newBox","isValid","rotationSnaps","enabledAnchors","anchorSize","anchorCornerRadius","borderStroke","anchorStroke","anchorFill","padding","_c","$RefreshReg$"],"sources":["C:/Users/eniac/Desktop/deepblue/src/components/Whiteboard.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Stage, Layer, Line, Rect, Circle, Image, Transformer } from 'react-konva';\r\nimport io from 'socket.io-client';\r\n\r\nconst socket = io('http://192.168.31.158:3001', {\r\n  transports: ['websocket', 'polling'],\r\n  reconnectionDelay: 1000,\r\n  reconnectionAttempts: 10,\r\n  forceNew: true\r\n});\r\n\r\nconst Whiteboard = () => {\r\n  const [lines, setLines] = useState([]);\r\n  const [shapes, setShapes] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(null);\r\n  const [tool, setTool] = useState('pen'); // pen, eraser, line, rectangle, circle, select\r\n  const [isDrawing, setIsDrawing] = useState(false);\r\n  const [startPos, setStartPos] = useState({ x: 0, y: 0 });\r\n  const transformerRef = useRef();\r\n  const stageRef = useRef();\r\n\r\n  useEffect(() => {\r\n    socket.on('draw-update', ({ lines, shapes }) => {\r\n      setLines(lines);\r\n      setShapes(shapes);\r\n    });\r\n\r\n    return () => {\r\n      socket.off('draw-update');\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedId) {\r\n      const shape = shapes.find(s => s.id === selectedId);\r\n      if (shape && transformerRef.current) {\r\n        transformerRef.current.nodes([stageRef.current.findOne('#' + selectedId)]);\r\n        transformerRef.current.getLayer().batchDraw();\r\n      }\r\n    }\r\n  }, [selectedId, shapes]);\r\n\r\n  const handleMouseDown = (e) => {\r\n    const pos = e.target.getStage().getPointerPosition();\r\n    setIsDrawing(true);\r\n    setStartPos(pos);\r\n  \r\n    if (tool === 'pen') {\r\n      const newLines = [...lines, { tool, points: [pos.x, pos.y] }];\r\n      setLines(newLines);\r\n      socket.emit('draw-update', { lines: newLines, shapes });\r\n    } else if (tool === 'eraser') {\r\n      const newLines = [...lines, { tool, points: [pos.x, pos.y] }];\r\n      setLines(newLines);\r\n      socket.emit('draw-update', { lines: newLines, shapes });\r\n    } else if (tool === 'select') {\r\n      const clickedShape = e.target;\r\n      if (clickedShape === e.target.getStage()) {\r\n        setSelectedId(null);\r\n        return;\r\n      }\r\n      if (clickedShape.getParent().className === 'Transformer') {\r\n        return;\r\n      }\r\n      setSelectedId(clickedShape.id());\r\n    }\r\n  };\r\n\r\n  const handleMouseMove = (e) => {\r\n    if (!isDrawing) return;\r\n\r\n    const stage = e.target.getStage();\r\n    const point = stage.getPointerPosition();\r\n\r\n    if (tool === 'pen' || tool === 'eraser') {\r\n      const lastLine = lines[lines.length - 1];\r\n      lastLine.points = lastLine.points.concat([point.x, point.y]);\r\n      const newLines = [...lines.slice(0, -1), lastLine];\r\n      setLines(newLines);\r\n      socket.emit('draw-update', { lines: newLines, shapes });\r\n    } else if (['line', 'rectangle', 'circle'].includes(tool)) {\r\n      const newShapes = [...shapes];\r\n      const index = newShapes.findIndex(s => s.id === 'temp');\r\n      const shapeData = {\r\n        id: 'temp',\r\n        type: tool,\r\n        x: startPos.x,\r\n        y: startPos.y,\r\n        width: point.x - startPos.x,\r\n        height: point.y - startPos.y,\r\n      };\r\n      \r\n      if (index === -1) {\r\n        newShapes.push(shapeData);\r\n      } else {\r\n        newShapes[index] = shapeData;\r\n      }\r\n      setShapes(newShapes);\r\n      socket.emit('draw-update', { lines, shapes: newShapes });\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    setIsDrawing(false);\r\n    if (['line', 'rectangle', 'circle'].includes(tool)) {\r\n      const newShapes = shapes.map(shape => \r\n        shape.id === 'temp' ? { ...shape, id: Date.now().toString() } : shape\r\n      );\r\n      setShapes(newShapes);\r\n      socket.emit('draw-update', { lines, shapes: newShapes });\r\n    }\r\n  };\r\n\r\n  const handleImageUpload = (e) => {\r\n    const file = e.target.files[0];\r\n    if (!file) return;\r\n  \r\n    // Validate file type and create a cache-safe URL\r\n    if (!file.type.startsWith('image/')) {\r\n      alert('Please upload an image file');\r\n      return;\r\n    }\r\n  \r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      // Create a temporary canvas to process the image\r\n      const tempCanvas = document.createElement('canvas');\r\n      const tempCtx = tempCanvas.getContext('2d');\r\n      const img = new window.Image();\r\n      \r\n      img.onload = () => {\r\n        // Set canvas size and draw image to get processed data\r\n        tempCanvas.width = img.width;\r\n        tempCanvas.height = img.height;\r\n        tempCtx.drawImage(img, 0, 0);\r\n        \r\n        // Get processed image data\r\n        const processedImageData = tempCanvas.toDataURL('image/png');\r\n        \r\n        // Calculate dimensions\r\n        const maxWidth = 800;\r\n        const maxHeight = 600;\r\n        let newWidth = img.width;\r\n        let newHeight = img.height;\r\n  \r\n        if (newWidth > maxWidth || newHeight > maxHeight) {\r\n          const ratio = Math.min(maxWidth / newWidth, maxHeight / newHeight);\r\n          newWidth *= ratio;\r\n          newHeight *= ratio;\r\n        }\r\n  \r\n        const newShape = {\r\n          id: Date.now().toString(),\r\n          type: 'image',\r\n          x: window.innerWidth / 4,\r\n          y: window.innerHeight / 4,\r\n          width: newWidth,\r\n          height: newHeight,\r\n          image: processedImageData,\r\n          rotation: 0,\r\n        };\r\n  \r\n        const newShapes = [...shapes, newShape];\r\n        setShapes(newShapes);\r\n        socket.emit('draw-update', { lines, shapes: newShapes });\r\n      };\r\n      img.src = reader.result;\r\n    };\r\n    reader.onerror = () => {\r\n      alert('Error reading file. Please try again.');\r\n    };\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  const handleDragEnd = (e) => {\r\n    const shape = e.target;\r\n    const newShapes = shapes.map(s => {\r\n      if (s.id === shape.id()) {\r\n        if (s.type === 'circle') {\r\n          return {\r\n            ...s,\r\n            x: shape.x() - s.width / 2,\r\n            y: shape.y() - s.height / 2\r\n          };\r\n        }\r\n        return {\r\n          ...s,\r\n          x: shape.x(),\r\n          y: shape.y()\r\n        };\r\n      }\r\n      return s;\r\n    });\r\n    setShapes(newShapes);\r\n    socket.emit('draw-update', { lines, shapes: newShapes });\r\n  };\r\n\r\n  const handleTransformEnd = (e) => {\r\n    const node = e.target;\r\n    const scaleX = node.scaleX();\r\n    const scaleY = node.scaleY();\r\n    \r\n    node.scaleX(1);\r\n    node.scaleY(1);\r\n    \r\n    const newShapes = shapes.map(shape => \r\n      shape.id === node.id() ? {\r\n        ...shape,\r\n        x: node.x(),\r\n        y: node.y(),\r\n        width: Math.abs(node.width() * scaleX),\r\n        height: Math.abs(node.height() * scaleY),\r\n        rotation: node.rotation()\r\n      } : shape\r\n    );\r\n    setShapes(newShapes);\r\n    socket.emit('draw-update', { lines, shapes: newShapes });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ position: 'fixed', top: 10, left: 10, zIndex: 1 }}>\r\n        <button onClick={() => setTool('pen')}>Pen</button>\r\n        <button onClick={() => setTool('eraser')}>Eraser</button>\r\n        <button onClick={() => setTool('line')}>Line</button>\r\n        <button onClick={() => setTool('rectangle')}>Rectangle</button>\r\n        <button onClick={() => setTool('circle')}>Circle</button>\r\n        <button onClick={() => setTool('select')}>Select</button>\r\n        <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload} />\r\n        <button onClick={() => {\r\n          setLines([]);\r\n          setShapes([]);\r\n          socket.emit('draw-update', { lines: [], shapes: [] });\r\n        }}>Clear All</button>\r\n      </div>\r\n      <Stage\r\n        ref={stageRef}\r\n        width={window.innerWidth}\r\n        height={window.innerHeight}\r\n        onMouseDown={handleMouseDown}\r\n        onMouseMove={handleMouseMove}\r\n        onMouseUp={handleMouseUp}\r\n        onTouchStart={handleMouseDown}\r\n        onTouchMove={handleMouseMove}\r\n        onTouchEnd={handleMouseUp}\r\n      >\r\n        <Layer>\r\n          {lines.map((line, i) => (\r\n            <Line\r\n              key={i}\r\n              points={line.points}\r\n              stroke={line.tool === 'eraser' ? '#ffffff' : '#000000'}\r\n              strokeWidth={line.tool === 'eraser' ? 20 : 5}\r\n              tension={0.5}\r\n              lineCap=\"round\"\r\n              lineJoin=\"round\"\r\n              globalCompositeOperation={\r\n                line.tool === 'eraser' ? 'destination-out' : 'source-over'\r\n              }\r\n            />\r\n          ))}\r\n          {shapes.map((shape) => {\r\n            if (shape.type === 'line') {\r\n              return (\r\n                <Line\r\n                  key={shape.id}\r\n                  id={shape.id}\r\n                  points={[shape.x, shape.y, shape.x + shape.width, shape.y + shape.height]}\r\n                  stroke=\"#000000\"\r\n                  strokeWidth={5}\r\n                  draggable={tool === 'select'}\r\n                  onClick={() => setSelectedId(shape.id)}\r\n                  onTransformEnd={handleTransformEnd}\r\n                />\r\n              );\r\n            } else if (shape.type === 'rectangle') {\r\n              return (\r\n                <Rect\r\n                  key={shape.id}\r\n                  id={shape.id}\r\n                  x={shape.x}\r\n                  y={shape.y}\r\n                  width={shape.width}\r\n                  height={shape.height}\r\n                  rotation={shape.rotation}\r\n                  stroke=\"#000000\"\r\n                  strokeWidth={5}\r\n                  draggable={tool === 'select'}\r\n                  onClick={() => tool === 'select' && setSelectedId(shape.id)}\r\n                  onDragEnd={handleDragEnd}\r\n                  onTransformEnd={handleTransformEnd}\r\n                />\r\n              );\r\n            } else if (shape.type === 'circle') {\r\n              return (\r\n                <Circle\r\n                  key={shape.id}\r\n                  id={shape.id}\r\n                  x={shape.x + shape.width / 2}\r\n                  y={shape.y + shape.height / 2}\r\n                  radius={Math.abs(shape.width) / 2}\r\n                  stroke=\"#000000\"\r\n                  strokeWidth={5}\r\n                  draggable={tool === 'select'}\r\n                  onClick={() => tool === 'select' && setSelectedId(shape.id)}\r\n                  onDragEnd={handleDragEnd}\r\n                  onTransformEnd={handleTransformEnd}\r\n                  rotation={shape.rotation}\r\n                />\r\n              );\r\n            } else if (shape.type === 'image') {\r\n              const imageObj = new window.Image();\r\n              imageObj.crossOrigin = 'anonymous';\r\n              imageObj.src = shape.image;\r\n              return (\r\n                <Image\r\n                  key={shape.id}\r\n                  id={shape.id}\r\n                  image={imageObj}\r\n                  x={shape.x}\r\n                  y={shape.y}\r\n                  width={shape.width}\r\n                  height={shape.height}\r\n                  rotation={shape.rotation}\r\n                  draggable={tool === 'select'}\r\n                  onClick={() => tool === 'select' && setSelectedId(shape.id)}\r\n                  onDragEnd={handleDragEnd}\r\n                  onTransformEnd={handleTransformEnd}\r\n                />\r\n              );\r\n            }\r\n            return null;\r\n          })}\r\n          {selectedId && tool === 'select' && (\r\n            <Transformer\r\n              ref={transformerRef}\r\n              boundBoxFunc={(oldBox, newBox) => {\r\n                const isValid = newBox.width > 5 && newBox.height > 5;\r\n                return isValid ? newBox : oldBox;\r\n              }}\r\n              rotationSnaps={[0, 45, 90, 135, 180, 225, 270, 315]}\r\n              enabledAnchors={[\r\n                'top-left', 'top-center', 'top-right',\r\n                'middle-left', 'middle-right',\r\n                'bottom-left', 'bottom-center', 'bottom-right'\r\n              ]}\r\n              anchorSize={8}\r\n              anchorCornerRadius={4}\r\n              borderStroke=\"#00ff00\"\r\n              anchorStroke=\"#00ff00\"\r\n              anchorFill=\"#ffffff\"\r\n              padding={5}\r\n            />\r\n          )}\r\n        </Layer>\r\n      </Stage>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Whiteboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}